name: Build and Distribute Package

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    name: Tag and Release If Version Changed
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies (no dev)
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      - name: Install PHP-Scoper globally
        run: composer global require humbug/php-scoper --no-interaction

      - name: Add global Composer bin to PATH
        run: echo "${HOME}/.composer/vendor/bin" >> $GITHUB_PATH

      - name: Clean previous vendor-prefix if any
        run: rm -rf framework/vendor-prefix

      - name: Run PHP-Scoper
        run: php-scoper add-prefix --output-dir=framework/vendor-prefix --config=scoper.inc.php --force

      - name: Run composer autoload dump
        run: COMPOSER_VENDOR_DIR=framework/vendor-prefix composer dump-autoload --optimize --no-dev

      - name: Get version from composer.json
        id: version
        run: |
          VERSION=$(jq -r '.version' composer.json)
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            echo "‚ùå No version found in composer.json"
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Found version: ${VERSION}"

      - name: Check if tag already exists
        id: tagcheck
        run: |
          if git rev-parse "v${{ steps.version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Tag v${{ steps.version.outputs.VERSION }} already exists, skipping release"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag v${{ steps.version.outputs.VERSION }} does not exist, proceeding with release"
          fi

      - name: Set up SSH access
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AR_PACKAGIST_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Create distribution package
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          mkdir -p release
          cp -r framework/src release/
          cp -r framework/vendor-prefix release/
          cp framework/composer.json release/
          [ -d "docs" ] && cp -r docs release/ || echo "No docs directory found"
          [ -f "README.md" ] && cp README.md release/ || echo "No README.md found"
          [ -f "LICENSE" ] && cp LICENSE release/ || echo "No LICENSE found"
          [ -f "CHANGELOG.md" ] && cp CHANGELOG.md release/ || echo "No CHANGELOG.md found"
          echo "‚úÖ Distribution package created"

      - name: Clone archetype-packagist outside working repo
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          echo "üì• Cloning archetype-packagist repository into /tmp..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git clone git@github.com:GDI-Tools/archetype-packagist.git /tmp/dist-repo

          echo "üßπ Cleaning contents..."
          rm -rf /tmp/dist-repo/* /tmp/dist-repo/.[!.]* || true

          echo "üì¶ Copying release package..."
          cp -r release/* /tmp/dist-repo/

          cd /tmp/dist-repo

          REPO_URL=$(git remote get-url origin)
          echo "üìç Confirming repo: $REPO_URL"
          if [[ "$REPO_URL" != *"archetype-packagist"* ]]; then
            echo "‚ùå ERROR: Wrong repository. Expected archetype-packagist"
            exit 1
          fi

          echo "üìã Committing and pushing..."
          git add .
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            git commit -m "Release v${{ steps.version.outputs.VERSION }}"
            git push origin main
          fi

      - name: Create release archive
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          cd release
          zip -r ../archetype-v${{ steps.version.outputs.VERSION }}.zip .
          cd ..
          echo "‚úÖ Archive created: archetype-v${{ steps.version.outputs.VERSION }}.zip"

      - name: Create Git tag
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          git tag v${{ steps.version.outputs.VERSION }}
          git push origin v${{ steps.version.outputs.VERSION }}

      - name: Create GitHub Release
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: "Release v${{ steps.version.outputs.VERSION }}"
          files: archetype-v${{ steps.version.outputs.VERSION }}.zip
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Cleanup
        if: always()
        run: |
          rm -rf release/
          rm -rf dist-repo/
          rm -f archetype-v*.zip
          rm -f ~/.ssh/id_rsa
          echo "üßπ Cleanup completed"
