- name: Push to distribution repositoryname: Create Release From Composer Version (Build Only)

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    name: Tag and Release If Version Changed
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies (no dev)
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      - name: Install PHP-Scoper globally
        run: composer global require humbug/php-scoper --no-interaction

      - name: Add global Composer bin to PATH
        run: echo "${HOME}/.composer/vendor/bin" >> $GITHUB_PATH

      - name: Clean previous vendor-prefix if any
        run: rm -rf framework/vendor-prefix

      - name: Run PHP-Scoper
        run: php-scoper add-prefix --output-dir=framework/vendor-prefix --config=scoper.inc.php --force

      - name: Run composer autoload dump
        run: COMPOSER_VENDOR_DIR=framework/vendor-prefix composer dump-autoload --optimize --no-dev

      - name: Get version from composer.json
        id: version
        run: |
          VERSION=$(jq -r '.version' composer.json)
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            echo "‚ùå No version found in composer.json"
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Found version: ${VERSION}"

      - name: Check if tag already exists
        id: tagcheck
        run: |
          if git rev-parse "v${{ steps.version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Tag v${{ steps.version.outputs.VERSION }} already exists, skipping release"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag v${{ steps.version.outputs.VERSION }} does not exist, proceeding with release"
          fi

      - name: Create distribution package
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          echo "üì¶ Creating distribution package..."
          
          # Create release folder with clean structure
          mkdir -p release
          
          # Copy essential files for distribution
          cp -r framework/src release/
          cp -r framework/vendor-prefix release/
          cp framework/composer.json release/
          
          # Copy documentation if it exists
          [ -d "docs" ] && cp -r docs release/ || echo "No docs directory found"
          [ -f "README.md" ] && cp README.md release/ || echo "No README.md found"
          [ -f "LICENSE" ] && cp LICENSE release/ || echo "No LICENSE found"
          [ -f "CHANGELOG.md" ] && cp CHANGELOG.md release/ || echo "No CHANGELOG.md found"
          
          echo "‚úÖ Distribution package created"

      - name: Verify distribution repository exists
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          echo "üîç Checking if archetype-packagist repository exists..."
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               https://api.github.com/repos/GDI-Tools/archetype-packagist
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          echo "üöÄ Pushing to distribution repository..."
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # First, let's test if we can access the distribution repository
          echo "üîç Testing access to distribution repository..."
          if ! git ls-remote https://${{ secrets.PAT_TOKEN }}@github.com/GDI-Tools/archetype-packagist.git HEAD; then
            echo "‚ùå Cannot access archetype-packagist repository. Check PAT_TOKEN permissions."
            exit 1
          fi
          echo "‚úÖ Access to distribution repository confirmed"
          
          # Clone the distribution repository using HTTPS with PAT
          echo "üì• Cloning archetype-packagist repository..."
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/GDI-Tools/archetype-packagist.git dist-repo
          cd dist-repo
          
          # Verify we're in the right repository
          REPO_URL=$(git remote get-url origin)
          echo "üìç Current repository: $REPO_URL"
          
          # Double check we're in the right place
          if [[ "$REPO_URL" != *"archetype-packagist"* ]]; then
            echo "‚ùå ERROR: Wrong repository! Expected archetype-packagist but got: $REPO_URL"
            exit 1
          fi
          
          # Remove all existing files (clean slate)
          rm -rf * .[^.]*
          
          # Copy release contents to distribution repo
          cp -r ../release/* .
          
          # Show what we're about to commit
          echo "üìã Files to be committed:"
          ls -la
          
          # Add and commit all changes
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Release v${{ steps.version.outputs.VERSION }}"
            # Push to the distribution repository - be very explicit
            echo "üì§ Pushing to archetype-packagist repository..."
            git push https://${{ secrets.PAT_TOKEN }}@github.com/GDI-Tools/archetype-packagist.git main
            echo "‚úÖ Successfully pushed to distribution repository: archetype-packagist"
          fi
          
          cd ..
          rm -rf dist-repo

      - name: Create release archive for GitHub release
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          echo "üì¶ Creating release archive..."
          
          # Create archive from release folder
          cd release
          zip -r ../archetype-v${{ steps.version.outputs.VERSION }}.zip .
          cd ..
          
          echo "‚úÖ Release archive created: archetype-v${{ steps.version.outputs.VERSION }}.zip"

      - name: Create Git tag
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        run: |
          echo "üè∑Ô∏è Creating git tag..."
          git tag v${{ steps.version.outputs.VERSION }}
          git push origin v${{ steps.version.outputs.VERSION }}
          echo "‚úÖ Tag v${{ steps.version.outputs.VERSION }} created and pushed"

      - name: Create GitHub Release
        if: steps.tagcheck.outputs.TAG_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: "Release v${{ steps.version.outputs.VERSION }}"
          files: archetype-v${{ steps.version.outputs.VERSION }}.zip
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Clean up temporary files
        if: always()
        run: |
          rm -rf release/
          rm -rf dist-repo/
          rm -f archetype-v*.zip
          rm -f ~/.ssh/id_rsa
          echo "üßπ Cleanup completed"